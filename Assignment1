{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "85668016-61b0-4ad7-ab14-c3679ec0cf0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "s ='sourabh'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5c368595-cce7-44a2-beff-201573e67a2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "75415920-8aa3-4ce4-9919-f7f4531011c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "L =['sourabh',\"krishnani\",1,19.5,True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0f7ceec4-6531-4ea2-8865-ec62debccf62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(L)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e0e9cedc-5048-4e4e-b7a3-c4daa4d89a01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n",
      "<class 'str'>\n",
      "<class 'int'>\n",
      "<class 'float'>\n",
      "<class 'bool'>\n"
     ]
    }
   ],
   "source": [
    "for i in L:\n",
    "    print(type(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "67fe135e-4f61-4e89-9142-0873e34127fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "b = 20.69"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6c2d58f5-8f23-4ed9-b1c4-9e0116d9475f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a16b91ff-ada0-4486-a967-ebde548bf4cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "T =(\"apple\",'banana',\"tea\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f12d25ae-7904-4379-a085-47108b670fdb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tuple"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8a2db375-2dee-43e5-8ca6-0d16f28caba0",
   "metadata": {},
   "outputs": [],
   "source": [
    "c =''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1d46fd1a-2816-47c9-b6ab-a99f5f36511a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "79f9b101-3ba8-4957-879d-2e5d91155072",
   "metadata": {},
   "outputs": [],
   "source": [
    "p ='[DS , ML , Python]'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "43e91edb-958c-4da5-9d40-6882c5141261",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'[DS , ML , Python]'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "03892834-a2b3-46cd-8ce7-85bfe1acf489",
   "metadata": {},
   "outputs": [],
   "source": [
    "q =['DS','ML','Python']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "877a4b27-078d-4821-9bbf-8882dede4262",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['DS', 'ML', 'Python']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "372e0d61-6096-4f5a-8229-23b134f1ff9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "u =1.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ff4026c5-1bbc-4317-a099-91efbcee15da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5a2e5d22-e022-4d2b-b32e-31b2465f5067",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "af90af9e-33da-4300-a46c-17391ad611ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1d9c3d39-e7fe-4e0c-a9f2-e971563e45a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(u)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "21a79271-a5b8-45e6-8bd0-ce5a38d50147",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.5"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "7/2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2982e8fb-c3a2-418d-96be-f44c5e7683d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#   / this operator is use to find division "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6981dc4c-b544-4338-982e-a68f847f12bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "57%8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "71a95db5-3dbc-4a8f-9292-b19763fde79f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#   % this operator is use to find remainders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "68f8ef4e-071b-4272-a43d-64bb11b53d97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "88//7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "776f14ba-f4d0-4877-acea-e6e36428ec36",
   "metadata": {},
   "outputs": [],
   "source": [
    "#the floor division // rounds the result down to the nearest whole number\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a8fbfad9-2f07-434e-a737-817a25ef4423",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2**6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6a0761a0-4c86-48e6-bc92-d47950c1ac06",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ** this operator is used to find solution in power factor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c1829aeb-b8b2-4266-bc7b-56171a68459b",
   "metadata": {},
   "outputs": [],
   "source": [
    "L= [1,'2',True,False,20.3,80.0,\"ram\",'shyam',9+3j,10]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "3e9eae3f-5bca-49eb-98a0-66f2a2552f43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n",
      "<class 'str'>\n",
      "<class 'bool'>\n",
      "<class 'bool'>\n",
      "<class 'float'>\n",
      "<class 'float'>\n",
      "<class 'str'>\n",
      "<class 'str'>\n",
      "<class 'complex'>\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "for x in L :\n",
    "    print(type(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fa5d3776-f6b4-42c6-ac37-8ce75243a8ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the value of A:  8\n",
      "Enter the value of B:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number A is purely divisible by B  3  times.\n"
     ]
    }
   ],
   "source": [
    "A = int(input(\"Enter the value of A: \"))\n",
    "B = int(input(\"Enter the value of B: \"))\n",
    "\n",
    "count = 0\n",
    "\n",
    "while A % B == 0:\n",
    "    count += 1\n",
    "    A = A / B\n",
    "\n",
    "if count > 0:\n",
    "    print(\"Number A is purely divisible by B \", count, \" times.\")\n",
    "else:\n",
    "    print(\"Number A is not purely divisible by B.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "24bf0e9e-525d-49db-ab0e-986e32bf5e16",
   "metadata": {},
   "outputs": [],
   "source": [
    "K =[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "bf47816b-d1f0-4e04-ba00-ee472eee9c86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "it is not divisible by three\n",
      "2\n",
      "it is not divisible by three\n",
      "3\n",
      "3\n",
      "4\n",
      "it is not divisible by three\n",
      "5\n",
      "it is not divisible by three\n",
      "6\n",
      "6\n",
      "7\n",
      "it is not divisible by three\n",
      "8\n",
      "it is not divisible by three\n",
      "9\n",
      "9\n",
      "10\n",
      "it is not divisible by three\n",
      "11\n",
      "it is not divisible by three\n",
      "12\n",
      "12\n",
      "13\n",
      "it is not divisible by three\n",
      "14\n",
      "it is not divisible by three\n",
      "15\n",
      "15\n",
      "16\n",
      "it is not divisible by three\n",
      "17\n",
      "it is not divisible by three\n",
      "18\n",
      "18\n",
      "19\n",
      "it is not divisible by three\n",
      "20\n",
      "it is not divisible by three\n",
      "21\n",
      "21\n",
      "22\n",
      "it is not divisible by three\n",
      "23\n",
      "it is not divisible by three\n",
      "24\n",
      "24\n",
      "25\n",
      "it is not divisible by three\n"
     ]
    }
   ],
   "source": [
    "for u in K :\n",
    "    print(u)\n",
    "    m =3\n",
    "    if u % m ==0 :\n",
    "        print(int(u))\n",
    "    else :\n",
    "         print(\"it is not divisible by three\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "14e15a54-4ded-49e1-83a6-27c05bf31549",
   "metadata": {},
   "outputs": [],
   "source": [
    "P =[\"w\", 'g', (3+5j), 23.2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7a21af89-7502-4e93-9633-834c2ed5b8c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "P[1]= 23.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "46b93da5-832a-4394-9b31-66b7479232eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['w', 23.0, (3+5j), 23.2]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d4b7e7bd-d163-4082-b98b-6bf437d9ae5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# in list p we can change an item by overwriting hence it is concept of mutability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d0004251-7168-492a-bb4a-bbdebbb2ab89",
   "metadata": {},
   "outputs": [],
   "source": [
    "F =\"SATI\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f853ebae-9aca-45c1-bef0-1aa70c1dec08",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'str' object does not support item assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[40], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mF\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m]\u001b[49m \u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m\n",
      "\u001b[0;31mTypeError\u001b[0m: 'str' object does not support item assignment"
     ]
    }
   ],
   "source": [
    "F[-1] =1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ffb7f62-0bb9-459b-8d13-97a40ecc3105",
   "metadata": {},
   "outputs": [],
   "source": [
    "# in string there is nat a concept of changing of elements hence it is immutable"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
